buildscript {
  repositories {
    jcenter()
    maven {
      name = "forge"
      url = "http://files.minecraftforge.net/maven"
    }
  }
  dependencies {
    classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
  }
}

apply plugin: "net.minecraftforge.gradle.forge"

def mod_file = getModFile()
version = getModField("VERSION", mod_file)
group = "net.gegy1000"
archivesBaseName = "terrarium"
sourceCompatibility = targetCompatibility = "1.8"

minecraft {
  version = "1.12-14.21.1.2387"
  runDir = "minecraft"
  mappings = "snapshot_20171224"
}

repositories {
  mavenCentral()
  jcenter()
  maven {
    name = "topobyte"
    url = "http://mvn.topobyte.de"
  }
}

configurations {
  embed
  compile.extendsFrom(embed)
}

dependencies {
  embed 'de.topobyte:osm4j-core:0.0.15'
  embed 'de.topobyte:osm4j-utils:0.0.20'
  embed 'de.topobyte:osm4j-geometry:0.0.10'
}

jar {
  from configurations.embed.collect {
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    it.isDirectory() ? it : zipTree(it)
  }
}

processResources {
  inputs.property "version", project.version
  inputs.property "mcversion", project.minecraft.version

  from(sourceSets.main.resources.srcDirs) {
    include "mcmod.info"
    expand "version": project.version, "mcversion": project.minecraft.version
  }

  from(sourceSets.main.resources.srcDirs) {
    exclude "mcmod.info"
  }
}

String getModFile() {
  String path = ""
  FileTree tree = fileTree(dir: 'src/main/java')
  tree.include '**/*.java'
  tree.visit { element ->
    if (element.file.isFile()) {
      element.file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith("@Mod")) {
          path = "src/main/java/$element.relativePath"
        }
      }
    }
  }
  return path
}

String getModField(String type, String mod_file) {
  if (mod_file.length() == 0) {
    return ""
  }
  String field = ""
  String prefix = "public static final $type = \""
  File file = file(mod_file)
  file.eachLine { String s ->
    s = s.trim()
    if (s.startsWith(prefix)) {
      s = s.substring(prefix.length(), s.length() - 2)
      field = s
    }
  }
  return field
}
